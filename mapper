import graphviz

def generate_call_hierarchy_graph(call_hierarchy, head_nodes, output_prefix):
    for i, head_node in enumerate(head_nodes, 1):
        dot = graphviz.Digraph(format='png', graph_attr={'size': '8000,6000', 'dpi': '300'})

        # Traverse the tree starting from the head node
        visited = set()
        queue = [head_node]
        while queue:
            node = queue.pop(0)
            if node not in visited:
                dot.node(node, shape='oval')
                visited.add(node)
                for callee in call_hierarchy.get(node, []):
                    dot.node(callee, shape='oval')
                    dot.edge(node, callee)
                    queue.append(callee)

        # Render and save the graph
        output_file = f"{output_prefix}_{i}.png"
        dot.render(output_file, cleanup=True)

# Example call hierarchy dictionary
call_hierarchy = {
    'function1': ['function2', 'function3'],
    'function2': ['function4'],
    'function3': ['function5', 'function6'],
    'function4': ['function7'],
    'function5': ['function8'],
    'function6': ['function9'],
    'function10': ['function11', 'function12'],
    'function11': ['function13'],
    'function12': ['function14', 'function15'],
    'function15': ['function16'],
}

# Example head nodes for three trees
head_nodes = ['function1', 'function10']

# Generate graphs for each tree
generate_call_hierarchy_graph(call_hierarchy, head_nodes, 'call_hierarchy')
